(ns clojurewerkz.statistiker.clustering.dbscan-test
  (:require [clojurewerkz.statistiker.clustering.dbscan :refer :all]
            [clojure.test :refer :all]))

(def points
  [[83.08303244924173 58.83387754182331] [45.05445510940626 23.469642649637535]
   [14.96417921432294 69.0264096390456] [73.53189604333602 34.896145021310076]
   [73.28498173551634 33.96860806993209] [73.45828098873608 33.92584423092194]
   [73.9657889183145 35.73191006924026] [74.0074097183533 36.81735596177168]
   [73.41247541410848 34.27314856695011] [73.9156256353017 36.83206791547127]
   [74.81499205809087 37.15682749846019] [74.03144880081527 37.57399178552441]
   [74.51870941207744 38.674258946906775] [74.50754595105536 35.58903978415765]
   [74.51322752749547 36.030572259100154] [59.27900996617973 46.41091720294207]
   [59.73744793841615 46.20015558367595] [58.81134076672606 45.71150126331486]
   [58.52225539437495 47.416083617601544] [58.218626647023484 47.36228902172297]
   [60.27139669447206 46.606106348801404] [60.894962462363765 46.976924697402865]
   [62.29048673878424 47.66970563563518] [61.03857608977705 46.212924720020965]
   [60.16916214139201 45.18193661351688] [59.90036905976012 47.555364347063005]
   [62.33003634144552 47.83941489877179] [57.86035536718555 47.31117930193432]
   [58.13715479685925 48.985960494028404] [56.131923963548616 46.8508904252667]
   [55.976329887053 47.46384037658572] [56.23245975235477 47.940035191131756]
   [58.51687048212625 46.622885352699086] [57.85411081905477 45.95394361577928]
   [56.445776311447844 45.162093662656844] [57.36691949656233 47.50097194337286]
   [58.243626387557015 46.114052729681134] [56.27224595635198 44.799080066150054]
   [57.606924816500396 46.94291057763621] [30.18714230041951 13.877149710431695]
   [30.449448810657486 13.490778346545994] [30.295018390286714 13.264889000216499]
   [30.160201832884923 11.89278262341395] [31.341509791789576 15.282655921997502]
   [31.68601630325429 14.756873246748] [29.325963742565364 12.097849250072613]
   [29.54820742388256 13.613295356975868] [28.79359608888626 10.36352064087987]
   [31.01284597092308 12.788479208014905] [27.58509216737002 11.47570110601373]
   [28.593799561727792 10.780998203903437] [31.356105766724795 15.080316198524088]
   [31.25948503636755 13.674329151166603] [32.31590076372959 14.95261758659035]
   [30.460413702763617 15.88402809202671] [32.56178203062154 14.586076852632686]
   [32.76138648530468 16.239837325178087] [30.1829453331884 14.709592407103628]
   [29.55088173528202 15.0651247180067] [29.004155302187428 14.089665298582986]
   [29.339624439831823 13.29096065578051] [30.997460327576846 14.551914158277214]])

(deftest cluster-test
  (let [clusters (map :points (cluster points 2.0 2))
        [c1 c2 c3] (map set clusters)]
    (is (= 3 (count clusters)))
    (is (= 12 (count c1)))
    (doseq [i (range 3 15)]
      (is (not (nil? (get c1 (get points i))))))

    (is (= 24 (count c2)))
    (doseq [i (range 15 39)]
      (is (not (nil? (get c2 (get points i))))))

    (is (= 23 (count c3)))
    (doseq [i (range 39 62)]
      (is (not (nil? (get c3 (get points i))))))))

(def point-maps
  [{:a 83.08303244924173, :b 58.83387754182331} {:a 45.05445510940626, :b 23.469642649637535}
   {:a 14.96417921432294, :b 69.0264096390456} {:a 73.53189604333602, :b 34.896145021310076}
   {:a 73.28498173551634, :b 33.96860806993209} {:a 73.45828098873608, :b 33.92584423092194}
   {:a 73.9657889183145, :b 35.73191006924026} {:a 74.0074097183533, :b 36.81735596177168}
   {:a 73.41247541410848, :b 34.27314856695011} {:a 73.9156256353017, :b 36.83206791547127}
   {:a 74.81499205809087, :b 37.15682749846019} {:a 74.03144880081527, :b 37.57399178552441}
   {:a 74.51870941207744, :b 38.674258946906775} {:a 74.50754595105536, :b 35.58903978415765}
   {:a 74.51322752749547, :b 36.030572259100154} {:a 59.27900996617973, :b 46.41091720294207}
   {:a 59.73744793841615, :b 46.20015558367595} {:a 58.81134076672606, :b 45.71150126331486}
   {:a 58.52225539437495, :b 47.416083617601544} {:a 58.218626647023484, :b 47.36228902172297}
   {:a 60.27139669447206, :b 46.606106348801404} {:a 60.894962462363765, :b 46.976924697402865}
   {:a 62.29048673878424, :b 47.66970563563518} {:a 61.03857608977705, :b 46.212924720020965}
   {:a 60.16916214139201, :b 45.18193661351688} {:a 59.90036905976012, :b 47.555364347063005}
   {:a 62.33003634144552, :b 47.83941489877179} {:a 57.86035536718555, :b 47.31117930193432}
   {:a 58.13715479685925, :b 48.985960494028404} {:a 56.131923963548616, :b 46.8508904252667}
   {:a 55.976329887053, :b 47.46384037658572} {:a 56.23245975235477, :b 47.940035191131756}
   {:a 58.51687048212625, :b 46.622885352699086} {:a 57.85411081905477, :b 45.95394361577928}
   {:a 56.445776311447844, :b 45.162093662656844} {:a 57.36691949656233, :b 47.50097194337286}
   {:a 58.243626387557015, :b 46.114052729681134} {:a 56.27224595635198, :b 44.799080066150054}
   {:a 57.606924816500396, :b 46.94291057763621} {:a 30.18714230041951, :b 13.877149710431695}
   {:a 30.449448810657486, :b 13.490778346545994} {:a 30.295018390286714, :b 13.264889000216499}
   {:a 30.160201832884923, :b 11.89278262341395} {:a 31.341509791789576, :b 15.282655921997502}
   {:a 31.68601630325429, :b 14.756873246748} {:a 29.325963742565364, :b 12.097849250072613}
   {:a 29.54820742388256, :b 13.613295356975868} {:a 28.79359608888626, :b 10.36352064087987}
   {:a 31.01284597092308, :b 12.788479208014905} {:a 27.58509216737002, :b 11.47570110601373}
   {:a 28.593799561727792, :b 10.780998203903437} {:a 31.356105766724795, :b 15.080316198524088}
   {:a 31.25948503636755, :b 13.674329151166603} {:a 32.31590076372959, :b 14.95261758659035}
   {:a 30.460413702763617, :b 15.88402809202671} {:a 32.56178203062154, :b 14.586076852632686}
   {:a 32.76138648530468, :b 16.239837325178087} {:a 30.1829453331884, :b 14.709592407103628}
   {:a 29.55088173528202, :b 15.0651247180067} {:a 29.004155302187428, :b 14.089665298582986}
   {:a 29.339624439831823, :b 13.29096065578051} {:a 30.997460327576846, :b 14.551914158277214}])

(defn find-cluster
  [clusters item-pred]
  (->> clusters
       (map (fn [c] (map #(dissoc % :cluster-id) c)))
       (filter (fn [points] (some item-pred points)))
       first
       set
       ))

(deftest cluster-by-test
  (let [clustered (cluster-by point-maps [:a :b] 2.0 2)
        clusters  (mapv second (vec (group-by :cluster-id clustered)))]

    (let [cluster-1 (find-cluster clusters #(= % (nth point-maps 12)))]
      (is (= 12 (count cluster-1)))
      (doseq [i (range 3 15)]
        (is (not (nil? (get cluster-1 (get point-maps i)))))))

    (let [cluster-2 (find-cluster clusters #(= % (nth point-maps 15)))]
      (is (= 24 (count cluster-2)))
      (doseq [i (range 15 39)]
        (is (not (nil? (get cluster-2 (get point-maps i)))))))

    (let [cluster-3 (find-cluster clusters #(= % (nth point-maps 39)))]
      (is (= 23 (count cluster-3)))
      (doseq [i (range 39 62)]
        (is (not (nil? (get cluster-3 (get point-maps i)))))))))
